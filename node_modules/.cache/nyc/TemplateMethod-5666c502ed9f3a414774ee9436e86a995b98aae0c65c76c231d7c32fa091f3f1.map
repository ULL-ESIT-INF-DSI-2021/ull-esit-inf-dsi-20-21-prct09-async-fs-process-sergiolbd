{"version":3,"file":"/home/sergio/Documentos/3º Info/2º Cuatri/DSI/mod2/src/TemplateMethod.ts","sources":["/home/sergio/Documentos/3º Info/2º Cuatri/DSI/mod2/src/TemplateMethod.ts"],"names":[],"mappings":";AAAA;;;;;;;;GAQG;;;AAEH;;GAEG;AACH,MAAsB,MAAM;IAE1B,YAAsB,UAAoB;QAApB,eAAU,GAAV,UAAU,CAAU;IAC1C,CAAC;IAED;;OAEG;IACI,GAAG;QACR,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAEhC,IAAI,CAAC,WAAW,EAAE,CAAC;QAEnB,uBAAuB;QACvB,mCAAmC;QAEnC,sBAAsB;IACxB,CAAC;IAED;;;OAGG;IACH,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACH,SAAS,CAAC,OAAe;QACvB,IAAI,MAAM,GAAG,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAElE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/C,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/C;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CAgBF;AAjED,wBAiEC;AAED;;GAEG;AACH,MAAa,SAAU,SAAQ,MAAM;IACnC,YAAsB,UAAoB;QACxC,KAAK,CAAC,UAAU,CAAC,CAAC;QADE,eAAU,GAAV,UAAU,CAAU;IAE1C,CAAC;IAED;;;;;OAKG;IACH,GAAG,CAAC,CAAS,EAAE,CAAQ;QACrB,OAAO,CAAC,GAAC,CAAC,CAAC;IACb,CAAC;IAED;;;OAGG;IACH,WAAW;QACT,OAAO,0BAA0B,CAAC;IACpC,CAAC;IAED;;;OAGG;IACH,YAAY;QACV,OAAO,oBAAoB,CAAC;IAC9B,CAAC;CACF;AA9BD,8BA8BC;AAED;;GAEG;AACH,MAAa,SAAU,SAAQ,MAAM;IACnC,YAAsB,UAAoB;QACxC,KAAK,CAAC,UAAU,CAAC,CAAC;QADE,eAAU,GAAV,UAAU,CAAU;IAE1C,CAAC;IAED;;;;;OAKG;IACH,GAAG,CAAC,CAAS,EAAE,CAAQ;QACrB,OAAO,CAAC,GAAC,CAAC,CAAC;IACb,CAAC;IAED;;;OAGG;IACH,WAAW;QACT,OAAO,0BAA0B,CAAC;IACpC,CAAC;IAED;;;OAGG;IACH,YAAY;QACV,OAAO,oBAAoB,CAAC;IAC9B,CAAC;CACF;AA9BD,8BA8BC","sourcesContent":["/**\n * Patrón Template Method (Comportamiento)\n * Permite definir un esqueleto algorítmico en una superclase, de modo que\n * aquellas subclases que extiendan el comportamiento de dicho esqueleto puedan\n * sobreescribir algunos pasos del algorítmo sin modificar su estructura base\n * \n * Ventajas --> Respeta Open-closed\n * Destentajas --> No respeta Liskov Substitution\n */\n\n/**\n * Clase Abstracta donde se define el metodo de plantilla\n */\nexport abstract class Reduce {\n  protected result: number;\n  constructor(protected inputArray: number[]) {\n  }\n\n  /**\n   * Método de plantilla\n   */\n  public run() {\n    this.beforeReduce();\n    this.result = this.addReduce(0);\n\n    this.afterReduce();\n\n    // this.beforeReduce();\n    // this.result = this.addReduce(0);\n\n    // this.afterReduce();\n  }\n\n  /**\n   * Obtener el resultado de reduce\n   * @returns {string}\n   */\n  getResult() {\n    return this.result;\n  }\n\n  /**\n   * Obtner el array de entrada\n   * @returns {number[]}\n   */\n  getArray() {\n    return this.inputArray;\n  }\n\n  /**\n   * Método Encargado de aplicar el addReduce\n   * @param {number} inicial posición inicial\n   * @returns {number}\n   */\n  addReduce(inicial: number): number {\n    let result = inicial !== undefined ? inicial : this.inputArray[0];\n\n    for (let i = 0; i < this.inputArray.length; i++) {\n      result = this.add(result, this.inputArray[i]);\n    }\n\n    return result;\n  }\n\n  /**\n   * Hock\n   */\n  abstract afterReduce(): string;\n  abstract beforeReduce(): string;\n\n\n  /**\n   * Método abstacto a definir en las clases hijas\n   * @param {number} a\n   * @param {number} b\n   */\n  abstract add(a: number, b:number): number;\n\n}\n\n/**\n * Clase hija encargada de hacer una suma de los elementos de un array\n */\nexport class AddReduce extends Reduce {\n  constructor(protected inputArray: number[]) {\n    super(inputArray);\n  }\n\n  /**\n   * Suma de dos elementos\n   * @param {number} a \n   * @param {number} b \n   * @returns {number}\n   */\n  add(a: number, b:number) {\n    return a+b;\n  }\n\n  /**\n   * Método Hock\n   * @returns {string}\n   */\n  afterReduce() {\n    return 'Vector reducido por suma';\n  }\n\n  /**\n   * Método Hock\n   * @returns {string}\n   */\n  beforeReduce() {\n    return 'Comenzar AddRecuce';\n  }\n}\n\n/**\n * Clase hija encargada de hacer una suma de los elementos de un array\n */\nexport class SubReduce extends Reduce {\n  constructor(protected inputArray: number[]) {\n    super(inputArray);\n  }\n\n  /**\n   * Suma de dos elementos\n   * @param {number} a \n   * @param {number} b \n   * @returns {number}\n   */\n  add(a: number, b:number) {\n    return a-b;\n  }\n\n  /**\n   * Método Hock\n   * @returns {string}\n   */\n  afterReduce() {\n    return 'Vector reducido por suma';\n  }\n\n  /**\n   * Método Hock\n   * @returns {string}\n   */\n  beforeReduce() {\n    return 'Comenzar AddRecuce';\n  }\n}\n\n\n"]}