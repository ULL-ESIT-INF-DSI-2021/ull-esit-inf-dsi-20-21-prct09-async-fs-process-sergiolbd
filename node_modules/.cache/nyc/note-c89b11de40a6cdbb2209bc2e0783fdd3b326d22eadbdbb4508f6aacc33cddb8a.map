{"version":3,"file":"/home/sergio/Documentos/3º Info/2º Cuatri/DSI/Práctica-8/src/note.ts","sources":["/home/sergio/Documentos/3º Info/2º Cuatri/DSI/Práctica-8/src/note.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nconst chalk = require('chalk');\nimport {note} from './types';\n\n/**\n * Constantes que usadas con chalk para dar color a mensajes de error e informativos\n */\nconst error = chalk.bold.red;\nconst informative = chalk.bold.green;\n\n/**\n * Clase NoteInstance\n */\nexport class NoteInstance {\n  /**\n   * Atributo privado estático para almacenar la única instancia\n   * que va a tener dicha clase\n   */\n  private static noteInstance: NoteInstance;\n\n  /**\n   * Constructor privado para que no se pueda invocar fuera de la clase\n   */\n  private constructor() {\n    if (fs.existsSync('./Note/')) {\n      fs.mkdirSync(`./Notes/`, {recursive: true});\n    }\n  }\n\n  /**\n   * Método encargado de comprobar que solo se genera una única\n   * instancia de la clase\n   * @returns {NoteInstance} Única instancia de la clase\n   */\n  public static getNoteInstance(): NoteInstance {\n    if (!NoteInstance.noteInstance) {\n      NoteInstance.noteInstance = new NoteInstance();\n    }\n    return NoteInstance.noteInstance;\n  }\n\n  /**\n   * Método encargado de añadir una nota a la base de datos de notas\n   * @param {note} nota Nota a añadir\n   * @returns {string} Cadenas a mostrar por pantalla se retornan para hacer test\n   */\n  addNotes(nota: note) {\n    const data = JSON.stringify(nota, null, 2);\n    const ruta: string = `./Notes/${nota.user}/${nota.title}.json`;\n    let test: string = '';\n    if (fs.existsSync(`./Notes/${nota.user}/`)) {\n      if (fs.existsSync(ruta)) {\n        test = 'Note title taken!';\n        console.log(error('Note title taken!'));\n      } else {\n        fs.writeFileSync(ruta, data);\n        test = `New note added in ${nota.user}!`;\n        console.log(informative(`New note added in ${nota.user}!`));\n      }\n    } else {\n      fs.mkdirSync(`./Notes/${nota.user}/`, {recursive: true});\n      fs.writeFileSync(ruta, data);\n      test = 'New note added!';\n      console.log(informative('New note added!'));\n    }\n    return test;\n  }\n\n  /**\n   * Método encargado realizar una modificación en la base de datos\n   * @param {string} user Usuario\n   * @param {string} title Titulo de la nota\n   * @param {string} modify Modificación\n   * @param {string} typemodify Tipo de modificación (Rename | append)\n   */\n  modify(user:string, title: string, newtitle: string) {\n    const ruta: string = `./Notes/${user}/${title}.json`;\n    const newruta: string = `./Notes/${user}/${newtitle}.json`;\n    if (fs.existsSync(ruta)) {\n      fs.renameSync(ruta, newruta);\n      console.log(informative(`${title}.json rename to ${newtitle}.json`));\n    } else {\n      console.log(error('You cannot modify a non-existent note!'));\n    }\n  }\n\n  /**\n   * Método encargado eliminar una nota de un determinado usuario\n   * @param {string} user Usuario\n   * @param {string} title Título\n   */\n  remove(user: string, title: string) {\n    const ruta: string = `./Notes/${user}/${title}.json`;\n    if (fs.existsSync(ruta)) {\n      fs.rmSync(ruta);\n      console.log(informative(`Remove ${title}`));\n    } else {\n      console.log(error('You cannot remove a non-existent note!'));\n    }\n  }\n\n  /**\n   * Método encargado de listar los títulos de la notas de un determinado user\n   * @param {string} user Usuario\n   * @returns {string[]} Array que almacena datos mostrados por consola para hacer test\n   */\n  list(user: string) {\n    const ruta: string = `./Notes/${user}/`;\n    const test: string[] = [];\n    if (fs.existsSync(ruta)) {\n      const titles = fs.readdirSync(ruta);\n      console.log('Your Notes');\n      titles.forEach((note) => {\n        const text = fs.readFileSync(ruta + note);\n        const titleBody = JSON.parse(text.toString());\n        test.push(titleBody.title);\n        this.colorsprint(titleBody.color, titleBody.title);\n      });\n    } else {\n      test.push('This user has no notes!');\n      console.log('This user has no notes!');\n    }\n    return test;\n  }\n\n  /**\n   * Método encargado de leer el cuerpo de una determinada nota\n   * @param {string} user Usuario\n   * @param {string} title Título de la nota\n   * @returns {string[]} Array que almacena datos mostrados por consola para hacer test\n   */\n  read(user: string, title: string) {\n    const ruta: string = `./Notes/${user}/${title}.json`;\n    const test: string[] = [];\n    if (fs.existsSync(ruta)) {\n      const text = fs.readFileSync(ruta);\n      const titleBody = JSON.parse(text.toString());\n      test.push(titleBody.title, titleBody.body);\n      console.log(`${titleBody.title}`);\n      this.colorsprint(titleBody.color, titleBody.body);\n    } else {\n      test.push('Note not found!');\n      console.log(error('Note not found!'));\n    }\n    return test;\n  }\n\n  /**\n   * Método usa chalk para determinar el color de la nota y mostrar por pantalla con el color\n   * @param {string} color Color\n   * @param {string} text Título\n   */\n  colorsprint(color: string, text: string) {\n    switch (color) {\n      case 'red': console.log(chalk.bold.red(text));\n        break;\n      case 'yellow': console.log(chalk.bold.yellow(text));\n        break;\n      case 'green': console.log(chalk.bold.green(text));\n        break;\n      case 'blue': console.log(chalk.bold.blue(text));\n        break;\n      default: console.log(chalk.bold.orange(text));\n        break;\n    }\n  }\n}\n"]}